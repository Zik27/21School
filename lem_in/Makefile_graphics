# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: djast <djast@student.42.fr>                +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/02/15 17:18:06 by djast             #+#    #+#              #
#    Updated: 2019/09/05 16:33:28 by djast            ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME_LEM_IN = lem-in
NAME_VISUAL = visualize

CC = gcc
CFLAGS = -Wall -Wextra -Werror

LIBFT_FOLDER = ./libft
LIBFT = $(LIBFT_FOLDER)/libft.a
LIBFT_HEADER = $(LIBFT_FOLDER)/libft.h

ID_UN := $(shell id -un)

SDL_FOLDER = /Users/$(ID_UN)/.brew/Cellar/sdl2/2.0.10/include/SDL2
SDL_LIB = /Users/$(ID_UN)/.brew/Cellar/sdl2/2.0.10/lib

SDL_TTF_FOLDER = /Users/$(ID_UN)/.brew/Cellar/sdl2_ttf/2.0.15/include/SDL2
SDL_TTF_LIB = /Users/$(ID_UN)/.brew/Cellar/sdl2_ttf/2.0.15/lib

HEADERS_DIRECTORY = ./includes
HEADERS = $(HEADERS_DIRECTORY)/lem_in.h

LIBS = -lft -L$(LIBFT_FOLDER) -L$(SDL_TTF_LIB) -L$(SDL_LIB) -lSDL2 -lSDL2_ttf
INCLUDES = -I$(HEADERS_DIRECTORY) -I$(LIBFT_FOLDER) -I$(SDL_TTF_FOLDER) -I$(SDL_FOLDER) 

COMMON_FILES =	count_ants.c \
				error.c \
				parse_comment.c \
				parse_links.c \
				parse_rooms.c \
				solver.c \
				to_array.c \
				utils.c \
				free.c \
				bfs.c \
				all_paths.c \
				init.c \
				choose_path.c \
				print_results.c \
				optimize.c

LEM_IN_FILES = lem_in.c
VISUAL_FILES = visualize.c \
				draw.c\
				SDL.c \
				key.c \
				print_result_sdl.c \
				free_sdl.c

SRC_DIRECTORY = ./sources/
SRC_COMMON_FILES = $(addprefix $(SRC_DIRECTORY), $(COMMON_FILES))
SRC_LEM_IN = $(addprefix $(SRC_DIRECTORY), $(LEM_IN_FILES))
SRC_VISUAL = $(addprefix $(SRC_DIRECTORY), $(VISUAL_FILES))

OBJ_FILES_COMMON = $(patsubst %.c, %.o, $(COMMON_FILES))
OBJ_FILES_LEM_IN = $(patsubst %.c, %.o, $(LEM_IN_FILES))
OBJ_FILES_VISUAL = $(patsubst %.c, %.o, $(VISUAL_FILES))

OBJ_DIRECTORY = ./objects/
OBJ_COMMON_FILES = $(addprefix $(OBJ_DIRECTORY), $(OBJ_FILES_COMMON))
OBJ_LEM_IN = $(addprefix $(OBJ_DIRECTORY), $(OBJ_FILES_LEM_IN))
OBJ_VISUAL = $(addprefix $(OBJ_DIRECTORY), $(OBJ_FILES_VISUAL))

GREEN = \033[0;32m
RED = \033[0;31m
RESET = \033[0m

all: $(NAME_LEM_IN) $(NAME_VISUAL)

$(NAME_LEM_IN): $(LIBFT) $(OBJ_DIRECTORY) $(OBJ_COMMON_FILES) $(OBJ_LEM_IN)
	@$(CC) $(CFLAGS) $(LIBS) $(INCLUDES) $(OBJ_COMMON_FILES) $(OBJ_LEM_IN) -o $(NAME_LEM_IN)
	@echo "$(RED)$(NAME_LEM_IN) $(GREEN)compiled successfully!$(RESET)"

$(NAME_VISUAL): $(LIBFT) $(OBJ_DIRECTORY) $(OBJ_COMMON_FILES) $(OBJ_VISUAL)
	@$(CC) $(CFLAGS) $(LIBS) $(INCLUDES) $(OBJ_COMMON_FILES) $(OBJ_VISUAL)  -o $(NAME_VISUAL)
	@echo "$(RED)$(NAME_VISUAL) $(GREEN)compiled successfully!$(RESET)"

$(OBJ_DIRECTORY):
	@mkdir -p $(OBJ_DIRECTORY)

$(OBJ_DIRECTORY)%.o : $(SRC_DIRECTORY)%.c $(HEADERS)
	@$(CC) $(CFLAGS) -c $(INCLUDES) $< -o $@

$(LIBFT):
	@$(MAKE) -sC $(LIBFT_FOLDER)
	@echo "$(RED)Libft $(GREEN)compiled successfully!$(RESET)"

clean:
	@$(MAKE) -sC $(LIBFT_FOLDER) clean
	@echo "$(RED)Libft $(GREEN)object files were deleted!$(RESET)"
	@/bin/rm -rf $(OBJ_COMMON_FILES)
	@/bin/rm -rf $(OBJ_VISUAL)
	@echo "$(RED)Object $(GREEN)files deleted.$(RESET)"

fclean: clean
	@$(MAKE) -sC $(LIBFT_FOLDER) fclean
	@echo "$(RED)Libft.a $(GREEN)was deleted.$(RESET)"
	@/bin/rm -rf $(NAME_LEM_IN)
	@echo "$(RED)$(NAME_LEM_IN) $(GREEN)was deleted.$(RESET)"
	@/bin/rm -rf $(NAME_VISUAL)
	@echo "$(RED)$(NAME_VISUAL) $(GREEN)was deleted.$(RESET)"

re: fclean all
