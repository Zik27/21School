/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: djast <djast@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/01/23 18:32:21 by djast             #+#    #+#             */
/*   Updated: 2019/01/24 18:04:49 by djast            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <unistd.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include "Libft/libft.h"

/*
** Структура, описывающие поведение спецификатора.
** minus - {Флаги} "-" - выводимое значение выравнивается по левому краю в пределах минимальной ширины поля.
** plus - {Флаги} "+" - всегда указывать знак (плюс или минус) для выводимого десятичного числового значения.
** space - {Флаги} " " - помещать перед результатом пробел, если первый символ значения не знак.
** hash - {Флаги} "#" - «альтернативная форма» вывода значения (Для 2, 8, 16-ричных СС).
** zero - {Флаги} "0" - дополнять поле до ширины, указанной в поле ширина управляющей последовательности, символом 0.
**-------------------------------------------------------------------------------------------------------------------
** width - {Ширина} - указывает минимальную ширину поля (включая знак для чисел).
**-------------------------------------------------------------------------------------------------------------------
** precision - {Точность} - минимальное количество символов, которое должно появиться при обработке типов d, i, o, u, x, X;
** precision - {Точность} - минимальное количество символов, которое должно появиться после точки при обработке типов a, A, e, E, f, F;
** precision - {Точность} - максимальное количество значащих символов для типов g и G;
** precision - {Точность} - максимальное число символов, которые будут выведены для типа s;
**-------------------------------------------------------------------------------------------------------------------
** lenght - {Размер} "l, ll, h, hh, L" - long, long long, short, char, long для float
*/

typedef struct	s_qual
{
	int minus : 2;
	int plus : 2;
	int space : 2;
	int hash : 2;
	int zero : 2;
	int width;
	int precision;
	char *lenght;
}				t_qual;

void			ft_putllnbr(intmax_t n);
void			ft_putllunbr(uintmax_t n);
char		    *ft_translation(long long value, int base);
void			ft_upper_str(char *str);